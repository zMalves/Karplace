Para criar um sistema de anúncios funcional e completo em PHP, siga este passo a passo, garantindo que cada parte do processo esteja pronta para funcionar. Vou criar um exemplo simples para um sistema de anúncios de veículos.

Estrutura do Projeto
Diretórios e Arquivos
public_html/
index.php (Página inicial)
anunciar.php (Formulário de anúncio)
processar_anuncio.php (Processa o anúncio)
includes/
config.php (Configurações do banco de dados)
functions.php (Funções auxiliares)
classes/
Database.php (Classe para conexão com o banco de dados)
Listing.php (Classe para gerenciar anúncios)
1. Arquivo de Configuração config.php
<?php
// Configuração do banco de dados
define('DB_HOST', 'localhost');
define('DB_NAME', 'marketplace_auto');
define('DB_USER', 'root');
define('DB_PASS', '');
// Conexão com o banco
try {
    $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}
?>
2. Classe de Banco de Dados Database.php
<?php
class Database {
    private $pdo;
    public function __construct() {
        $this->pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
    }
    public function query($sql) {
        return $this->pdo->prepare($sql);
    }
    public function bind($param, $value) {
        $this->query->bindValue($param, $value);
    }
    public function execute() {
        return $this->query->execute();
    }
    public function lastInsertId() {
        return $this->pdo->lastInsertId();
    }
}
?>
3. Classe de Anúncio Listing.php
<?php
class Listing {
    private $db;
    public function __construct() {
        $this->db = new Database();
    }
    public function create($data) {
        $this->db->beginTransaction();
        try {
            // Insere o veículo (simplificado)
            $this->db->query('INSERT INTO listings (user_id, title, description, price, location) VALUES (:user_id, :title, :description, :price, :location)');
            $this->db->bind(':user_id', $data['user_id']);
            $this->db->bind(':title', $data['title']);
            $this->db->bind(':description', $data['description']);
            $this->db->bind(':price', $data['price']);
            $this->db->bind(':location', $data['location']);
            $this->db->execute();
            $listing_id = $this->db->lastInsertId();
            $this->db->commit();
            return $listing_id;
        } catch (Exception $e) {
            $this->db->rollBack();
            return false;
        }
    }
}
?>
4. Formulário de Anúncio anunciar.php
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Criar Anúncio</title>
</head>
<body>
    <h1>Criar um Anúncio para seu Carro</h1>
    <form action="processar_anuncio.php" method="POST">
        <label for="title">Título:</label>
        <input type="text" name="title" required>
        <label for="description">Descrição:</label>
        <textarea name="description" required></textarea>
        <label for="price">Preço:</label>
        <input type="number" name="price" required>
        <label for="location">Localização:</label>
        <input type="text" name="location" required>
        <button type="submit">Criar Anúncio</button>
    </form>
</body>
</html>
5. Processar Anúncio processar_anuncio.php
<?php
require_once '../includes/config.php';
require_once '../classes/Listing.php';
session_start();
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $data = [
        'user_id' => $_SESSION['user_id'], // Assume que o usuário está logado
        'title' => $_POST['title'],
        'description' => $_POST['description'],
        'price' => $_POST['price'],
        'location' => $_POST['location']
    ];
    $listingObj = new Listing();
    $result = $listingObj->create($data);
    if ($result) {
        echo "Anúncio criado com sucesso! ID do anúncio: " . $result;
    } else {
        echo "Erro ao criar o anúncio.";
    }
} else {
    header("Location: anunciar.php");
    exit();
}
?>
6. Página Inicial index.php
<?php
require_once '../includes/config.php';
require_once '../classes/Listing.php';
$listingObj = new Listing();
$latestListings = $listingObj->getRecentListings(); // Implemente o método para pegar os anúncios recentes.
?>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Anúncios Recentes</title>
</head>
<body>
    <h1>Anúncios Recentes</h1>
    <ul>
        <?php foreach ($latestListings as $listing): ?>
            <li><?php echo $listing['title']; ?> - <?php echo formatMoney($listing['price']); ?></li>
        <?php endforeach; ?>
    </ul>
    <a href="anunciar.php">Criar Novo Anúncio</a>
</body>
</html>
7. Atualizar o Banco de Dados
Certifique-se que as tabelas do banco de dados estejam estruturadas corretamente:

CREATE TABLE listings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    location VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
8. Resultado
Agora, você terá um sistema simples mas totalmente funcional para permitir que os usuários criem anúncios de seus veículos.
O formulário coleta os dados do carro e processa esses dados ao ser enviado.
Os anúncios serão mostrados em uma lista na página inicial.
Teste o sistema e ajuste conforme necessário. Se precisar de mais funcionalidades ou ajustes, estou aqui para ajudar!

Erro SQL [1050] [42S01]: Table 'listings' already exists

MA

maychelseconds
Assistant
4 minutes ago
O erro "Table 'listings' already exists" indica que você está tentando criar uma tabela que já existe no banco de dados. Para resolver isso, você deve verificar se a tabela listings já está criada antes de tentar criá-la novamente.

Aqui está como você poderia modificar seu script SQL para verificar se a tabela existe antes de tentar criá-la:

DROP TABLE IF EXISTS listings; -- Remove a tabela, se já existir
CREATE TABLE listings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    vehicle_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    location VARCHAR(100) NOT NULL,
    status ENUM('active', 'pending', 'sold', 'inactive') NOT NULL DEFAULT 'pending',
    featured BOOLEAN NOT NULL DEFAULT FALSE,
    verified BOOLEAN NOT NULL DEFAULT FALSE,
    views INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    expires_at DATE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE CASCADE
) ENGINE=InnoDB;
Neste código, a linha DROP TABLE IF EXISTS listings; garante que, se a tabela listings já existir, ela será removida antes que uma nova seja criada. Desta forma, o erro que você encontrou será evitado.

Certifique-se também de que o restante do seu script SQL não tenta criar a mesma tabela em outra parte. Execute o código modificado no seu banco de dados para definir a tabela adequadamente. Se você não quiser remover a tabela atual e somente deseja modificar sua estrutura, então você deve usar comandos ALTER TABLE em vez de CREATE TABLE